{"pages":[],"posts":[{"title":"装机","text":"oh-my-zsh brew clashx 科学客户端","link":"/2022/06/17/first/"},{"title":"microk8s","text":"安装轻量级k8s很适合单节点安装k8s环境. 官方文档 1sudo snap install microk8s --classic --channel=1.24 设置镜像拉取proxy在/var/snap/microk8s/current/args/containerd-env文件设置代理 123456789101112# To start containerd behind a proxy you need to add an HTTPS_PROXY# environment variable in this file. HTTPS_PROXY is of the following form:# HTTPS_PROXY=http://username:password@proxy:port/# where username: and password@ are optional. eg:##HTTPS_PROXY=http://127.0.0.1:7890## You may also want to set NO_PROXY to include the cluster-cidr and the services-cidr# as specified in /var/snap/microk8s/current/args/kube-proxy and# /var/snap/microk8s/current/args/kube-apiserver##NO_PROXY=10.1.0.0/16,10.152.183.0/24 重启让microk8s使用代理拉取google镜像 123microk8s stopmicrok8s start 启用ingress1microk8s enable ingress Ingress-nginx使用说明 设置证书相关 1234kubectl create secret tls ${CERT_NAME} --key ${KEY_FILE} --cert ${CERT_FILE}--default-ssl-certificate=&lt;namespace&gt;/&lt;secret name&gt;","link":"/2022/06/20/microk8s/"},{"title":"buf使用介绍","text":"安装方式 1. 初始化buf配置在proto文件的根目录执行命令 1buf mod init 会在当前路径下生成buf.yaml配置文件 1234567version: v1lint: use: - DEFAULT #默认lint规则集合breaking: use: - FILE #默认breacking change检测类别 2. 从protoc到bufprotoc是grpc原生的proto生成工具使用通常比较麻烦，需要指定各种依赖导入： 12345protoc \\ -I proto \\ -I ./build/google-common-protos --python_gapic_out=output/python $(find proto -name '*.proto') 使用buf则可以通过配置工作空间或者远程依赖轻松管理依赖导入 工作空间方式在最外层目录下新建buf.work.yaml，一个工作空间可以包含多个模块，每个模块的根目录都有buf.yaml文件，最外层通过buf.work.yaml组织管理 1234version: v1directories: - proto - build/google-common-protos 远程依赖方式修改buf.yaml添加远程依赖项 123456789version: v1breaking: use: - FILEdeps: - buf.build/googleapis/googleapis:4bdf33e750fb409da9d403e1e98031f4lint: use: - DEFAULT 执行命令更新依赖增加依赖后可以删除buf.work.yaml中derectoreis中配置的第三方依赖 3. lint执行buf lint对当前路径下proto文件进行lint，或者buf lint &lt;dir&gt;针对子路径lint，在buf.yaml中配置如下： 123456789101112131415version: v1lint: use: - DEFAULT #lint级别 DEFAULT&gt;BASIC&gt;DEFAULT except: # 排除的规则 - FILE_LOWER_SNAKE_CASE ignore: #排除的文件 - bat - ban/ban.proto ignore_only: #单独对部分规则部分文件排除 ENUM_PASCAL_CASE: - foo/foo.proto - bar BASIC: - foo 更详细的说明docs 4. buildbuf build命令主要检测当前模块空间或者指定路径下proto文件是否有错误，或者依赖没有导入。使用buf.build.yaml配置build路径排除等 1234version: v1build: excludes: - build/google-common-protos 5. generate当能正确build后，可以通过buf generate &lt;proto_dir&gt; 命令根据buf.gen.yaml中配置的规则生成对应语言sdk。 buf.gen.yaml如下： 12345678910111213141516171819version: v1plugins: - name: go out: output/golang opt: - paths=source_relative - name: go out: output/golang opt: - plugins=grpc - name: python out: output/python - name: python_gapic out: output/python opt: - python-gapic-templates=&lt;gapic python 模板绝对路径&gt; 托管模式使用托管模式可以删掉proto文件中option go_package = &quot;github.com/xx/xx/xx&quot;，然后再buf.gen.yaml中配置go包名 123456789version: v1managed: enabled: true go_package_prefix: default: github.com/bufbuild/buf-tour/petstore/gen/proto/goplugins: - name: go out: gen/proto/go opt: paths=source_relative 6. 完整项目目录结构123456789101112131415161718├── template #gapic python模板（如有需要）│ ├── proto #proto文件│ ├── xx│ ├── buf.yaml│ └── buf.lock├── proto2 #proto文件│ ├── xx1│ ├── buf.yaml│ └── buf.lock├── output├── build #第三方导入│ └── google-common-protos├── buf.yaml #基本配置 ├── buf.work.yaml #工作空间配置├── buf.lock ├── buf.gen.yaml #generate 配置└── buf.build.yaml #build 配置 7. 检测breaking change可以配置四种类别，严格性FILE&gt; PACKAGE&gt; WIRE_JSON&gt;WIRE 详情 1234567version: v1lint: use: - DEFAULTbreaking: use: - FILE 变更将某个message中字段进行变更 123456 message Pet {- PetType pet_type = 1;+ string pet_type = 1; string pet_id = 2; string name = 3; } 检测使用buf breaking命令检测 1buf breaking --against &quot;../../.git#branch=main,subdir=start/petapis&quot; 1234pet/v1/pet.proto:1:1:Previously present service &quot;PetStore&quot; was deleted from file.pet/v1/pet.proto:20:3:Field &quot;1&quot; on message &quot;Pet&quot; changed type from &quot;enum&quot; to &quot;string&quot;.pet/v1/pet.proto:44:3:Field &quot;1&quot; with name &quot;pet_id&quot; on message &quot;DeletePetRequest&quot; changed option &quot;json_name&quot; from &quot;petID&quot; to &quot;petId&quot;.pet/v1/pet.proto:44:10:Field &quot;1&quot; on message &quot;DeletePetRequest&quot; changed name from &quot;petID&quot; to &quot;pet_id&quot; 8. 将项目proto上传远程BSR(目前免费)详细官方doc: login push BSR中创建账号和proto仓库 本地配置BSR登录信息 修改buf.yaml关联BSR仓库 123456789buf.yaml version: v1 name: buf.build/crockitwood/someapis lint: use: - DEFAULT breaking: use: - FILE 执行buf push 推送至BSR 其他模块远程依赖 12345678910version: v1name: buf.build/$BUF_USER/petapisdeps: - buf.build/crockitwood/someapislint: use: - DEFAULTbreaking: use: - FILE","link":"/2022/06/20/buf%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"}],"tags":[{"name":"其他","slug":"其他","link":"/tags/%E5%85%B6%E4%BB%96/"},{"name":"k8s","slug":"k8s","link":"/tags/k8s/"},{"name":"grpc","slug":"grpc","link":"/tags/grpc/"}],"categories":[]}